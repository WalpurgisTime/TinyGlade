#pragma kernel CSMain

// ⚡ Déclarations globales

RWTexture2D<float4> path_mask;
float2 path_mask_ws_dims;

RWStructuredBuffer<DrawCommand> cmds;
RWStructuredBuffer<float4x4> transforms;
RWStructuredBuffer<ArchSegmentData> segs;

// Structures utilisées
struct DrawCommand
{
    uint count;
    uint instanceCount;
    uint firstIndex;
    uint baseVertex;
    uint baseInstance;
};

struct ArchSegmentData
{
    float2 start;
    float2 end;
};

// Fonction utilitaire pour récupérer la valeur d'un pixel dans path_mask
int2 WsPosToPixelCoord(float3 ws_pos, int2 img_dims)
{
    float2 texture_uv = ws_pos.xz / path_mask_ws_dims + 0.5;
    return int2(texture_uv.x * img_dims.x, texture_uv.y * img_dims.y);
}

float PositionWsToRoadMaskValue(float3 position, int2 dims)
{
    int2 pixel_coord = WsPosToPixelCoord(position, dims);
    return path_mask[pixel_coord].x;
}

// Fonction d’élévation de l'arc
float ArchFunction(float h)
{
    return 1.0 - exp(-5.0 * h);
}

// Transformation d'une courbe vers l'espace de l'arche
float3 CurveWsToArchWs(float3 curve_ws, int2 dims)
{
    curve_ws.y = PositionWsToRoadMaskValue(curve_ws, dims);
    curve_ws.y = ArchFunction(curve_ws.y);
    return curve_ws;
}

// Calcul de la longueur d'une arche en subdivisant
float LengthArch(float3 from, float3 to, int2 dims)
{
    const uint SUBDIV = 30;
    float out_length = 0.0;

    for (int i = 0; i < SUBDIV; i++)
    {
        float3 subdiv_p1 = lerp(from, to, float(i) / float(SUBDIV));
        float3 subdiv_p2 = lerp(from, to, float(i + 1) / float(SUBDIV));

        subdiv_p1 = CurveWsToArchWs(subdiv_p1, dims);
        subdiv_p2 = CurveWsToArchWs(subdiv_p2, dims);

        out_length += distance(subdiv_p1, subdiv_p2);
    }

    return out_length;
}

// -------------------------------------------
// Fonction principale du Compute Shader

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    
    int2 dims;
    path_mask.GetDimensions(dims.x, dims
