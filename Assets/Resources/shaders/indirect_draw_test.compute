#pragma kernel CSMain

RWTexture2D<float4> img_output;
float3 Mouse_Position;
int is_additive;
float2 path_mask_ws_dims;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float BRUSH_SIZE = 0.45; // DEFAULT 0.75

    // HACK
    if (is_additive == 0)
    { // HLSL ne supporte pas bool en uniform
        BRUSH_SIZE = 0.75 * 0.9;
    }

    // Obtenir la position du pixel
    int2 pixel_coords = int2(id.xy);
    uint2 dims;
    img_output.GetDimensions(dims.x, dims.y);

    // Lire la couleur du pixel
    float4 pixel = img_output[pixel_coords];

    // Transformation de coordonnées (de l'écran au monde)
    float x = (float(pixel_coords.x * 2 - int(dims.x)) / float(dims.x));
    float y = (float(pixel_coords.y * 2 - int(dims.y)) / float(dims.y));

    x *= path_mask_ws_dims.x / 2.0;
    y *= path_mask_ws_dims.y / 2.0;
    float3 pixel_ws = float3(x, 0.0, y);

    // Calcul de la distance par rapport à la souris
    float d = distance(pixel_ws, Mouse_Position);
    d = clamp(d, 0.0, BRUSH_SIZE);
    d = (BRUSH_SIZE - d) / BRUSH_SIZE;

    d = (d > 0.0) ? 1.0 : 0.0;

    if (is_additive == 1)
    {
        // Ajouter au masque
        pixel = max(pixel, float4(d, d, d, 1.0));
    }
    else
    {
        // Effacer du masque
        float v = max(pixel.x - d, 0.0);
        pixel = float4(v.xxx, 1.0);
    }

    // Écriture dans la texture
    img_output[pixel_coords] = pixel;
}
