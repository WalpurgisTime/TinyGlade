#pragma kernel CSMain

RWTexture2D<float4> img_in;
RWTexture2D<float4> img_out;

int2 GetTextureSize(RWTexture2D<float4> tex)
{
    uint width, height;
    tex.GetDimensions(width, height);
    return int2(width, height);
}

float4 GetImgInPixel(int2 coord, int2 dims)
{
    if (coord.x < 0 || coord.x >= dims.x || coord.y < 0 || coord.y >= dims.y)
    {
        return float4(0.0, 0.0, 0.0, 1.0);
    }
    return img_in[coord];
}

float NormPdf(float x, float sigma)
{
    return 0.39894 * exp(-0.5 * x * x / (sigma * sigma)) / sigma;
}

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int2 pixel_coords = int2(id.xy);
    int2 dims = GetTextureSize(img_in);

    float4 sum = float4(0.0, 0.0, 0.0, 1.0);

    // Paramètres du flou gaussien
    float Pi = 6.28318530718;
    float Directions = 30.0;
    float Quality = 10.0;
    float Size = 10.0;

    float2 Radius = Size / float2(dims);
    float2 uv = float2(pixel_coords) / float2(dims);

    float4 Color = img_in[pixel_coords];

    // Application du flou gaussien
    for (float d = 0.0; d < Pi; d += Pi / Directions)
    {
        for (float i = 1.0 / Quality; i <= 1.0; i += 1.0 / Quality)
        {
            float2 uv_offset = uv + float2(cos(d), sin(d)) * Radius * i;
            int2 coord = int2(uv_offset * float2(dims));
            Color += GetImgInPixel(coord, dims);
        }
    }

    Color /= Quality * Directions - 15.0;

    // Sortie du pixel transformé
    img_out[pixel_coords] = float4(Color.rgb, 1.0);
}
